<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= task.name %> - Task Details</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 28px;
            border-bottom: 2px solid #eaeaea;
            padding-bottom: 10px;
        }
        
        h2 {
            color: #3498db;
            margin: 25px 0 15px;
            font-size: 22px;
        }
        
        /* Task details styles */
        .task-details {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }
        
        .task-details p {
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .task-details strong {
            color: #2c3e50;
        }
        
        .task-details a {
            color: #3498db;
            text-decoration: none;
        }
        
        .task-details a:hover {
            text-decoration: underline;
        }
        
        /* Comments section styles */
        .comments-container {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .comments-header {
            background: #3498db;
            color: white;
            padding: 15px 20px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .members-info {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .comments-list {
            padding: 20px;
            max-height: 500px;
            overflow-y: auto;
            background-color: #f8f9fa;
        }
        
        .comment {
            margin-bottom: 25px;
            max-width: 80%;
            position: relative;
        }
        
        .comment.other-user {
            margin-right: auto;
        }
        
        .comment.current-user {
            margin-left: auto;
            text-align: right;
        }
        
        .comment-header {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .comment.other-user .comment-header {
            justify-content: flex-start;
        }
        
        .comment.current-user .comment-header {
            justify-content: flex-end;
        }
        
        .user-name {
            font-weight: 600;
            color: #2c3e50;
            margin-right: 10px;
        }
        
        .comment-time {
            font-size: 12px;
            color: #7f8c8d;
        }
        
        .comment-content {
            background: #f1f3f6;
            padding: 12px 15px;
            border-radius: 18px;
            display: inline-block;
            position: relative;
        }
        
        .comment.other-user .comment-content {
            background: #e6f7ff;
            border-top-left-radius: 5px;
        }
        
        .comment.current-user .comment-content {
            background: #d4edda;
            border-top-right-radius: 5px;
        }
        
        .comment-text {
            margin-bottom: 8px;
        }
        
        .comment-attachment {
            margin-top: 8px;
        }
        
        .comment-attachment a {
            color: #3498db;
            text-decoration: none;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
        }
        
        .comment-attachment a:hover {
            text-decoration: underline;
        }
        
        .reaction-count {
            font-size: 12px;
            color: #7f8c8d;
            margin-top: 5px;
            display: flex;
            align-items: center;
        }
        
        .comment.other-user .reaction-count {
            justify-content: flex-start;
        }
        
        .comment.current-user .reaction-count {
            justify-content: flex-end;
        }
        
        .reaction-count span {
            margin-right: 5px;
        }
        
        /* Add comment form styles */
        .add-comment-form {
            background: white;
            padding: 20px;
            border-top: 1px solid #eaeaea;
        }
        
        .add-comment-form textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            resize: vertical;
            font-size: 16px;
            margin-bottom: 10px;
            transition: border-color 0.3s;
        }
        
        .add-comment-form textarea:focus {
            outline: none;
            border-color: #3498db;
        }
        
        .file-upload {
            margin-bottom: 15px;
        }
        
        .file-upload label {
            display: inline-block;
            background: #f8f9fa;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            color: #495057;
            border: 1px dashed #ced4da;
        }
        
        .file-upload input[type="file"] {
            display: none;
        }
        
        .submit-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        .submit-btn:hover {
            background: #2980b9;
        }
        
        .submit-btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }
        
        /* No comments message */
        .no-comments {
            text-align: center;
            padding: 40px 20px;
            color: #7f8c8d;
            font-style: italic;
        }
        
        /* Status indicators */
        .online-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: #2ecc71;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        /* User avatar */
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: #3498db;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 10px;
        }
        
        .comment.other-user .user-avatar {
            background-color: #e74c3c;
        }
        
        .comment.current-user .user-avatar {
            background-color: #2ecc71;
            margin-right: 0;
            margin-left: 10px;
        }
        
        /* Task status */
        .task-status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin-left: 10px;
        }
        
        .status-in-progress {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .status-completed {
            background-color: #d4edda;
            color: #155724;
        }
        
        /* Loading indicator */
        .loading {
            text-align: center;
            padding: 20px;
            color: #7f8c8d;
        }
        
        /* Alert messages */
        .alert {
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 16px;
            font-size: 14px;
        }
        
        .alert-error {
            background-color: #fee;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        
        .alert-success {
            background-color: #eff;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .comment {
                max-width: 90%;
            }
            
            .container {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><%= task.name %> <span class="task-status status-in-progress">In Progress</span></h1>
        <div class="task-details">
            <p><strong>Description:</strong> <%= task.description %></p>
            <p><strong>Assigned to:</strong> <%= (task.assignedTo || []).join(', ') %></p>
            <p><strong>Created at:</strong> <%= task.createdAt %></p>
            <% if (task.downloadUrl) { %>
                <p><strong>Attachment:</strong> <a href="<%= task.downloadUrl %>" target="_blank">Download</a></p>
            <% } else if (task.fileUrl) { %>
                <p><strong>Attachment:</strong> <a href="<%= task.fileUrl %>" target="_blank">Download</a></p>
            <% } %>
        </div>

        <div class="comments-container">
            <div class="comments-header">
                <span>Comments</span>
                <div class="members-info"><span class="online-indicator"></span> <span id="online-count">10</span> online, <span id="members-count">23</span> members</div>
            </div>
            
            <div class="comments-list" id="comments-list">
                <% if (!comments || comments.length === 0) { %>
                    <div class="no-comments">No comments found.</div>
                <% } else { %>
                    <% comments.forEach(comment => { %>
                        <div class="comment <%= comment.UserID === user.userId ? 'current-user' : 'other-user' %>" data-comment-id="<%= comment.CommentID %>">
                            <div class="comment-header">
                                <% if (comment.UserID === user.userId) { %>
                                    <div class="comment-time"><%= comment.CreatedAt %></div>
                                    <div class="user-name"><%= comment.Username || 'You' %></div>
                                    <div class="user-avatar"><%= (comment.Username || 'You').charAt(0).toUpperCase() %></div>
                                <% } else { %>
                                    <div class="user-avatar"><%= getInitials(comment.Username || 'User') %></div>
                                    <div class="user-name"><%= comment.Username || 'User' %></div>
                                    <div class="comment-time"><%= formatTime(comment.CreatedAt) %></div>
                                <% } %>
                            </div>
                            <div class="comment-content">
                                <div class="comment-text"><%= comment.CommentText %></div>
                                <% if (comment.FileUrl) { %>
                                    <div class="comment-attachment">
                                        <a href="<%= comment.FileUrl %>" target="_blank"><i class="fas fa-paperclip"></i> Download Attachment</a>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            </div>

            <div class="add-comment-form">
                <h2>Add Comment</h2>
                <div id="form-messages"></div>
                <form id="comment-form" action="/add-comment" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="taskId" value="<%= task.id %>">
                    <textarea name="commentText" id="comment-text" rows="4" placeholder="Enter your comment" required></textarea>
                    <div class="file-upload">
                        <label for="attachment"><i class="fas fa-paperclip"></i> Add Attachment</label>
                        <input type="file" name="attachment" id="attachment" accept="*/*">
                    </div>
                    <button type="submit" class="submit-btn" id="submit-btn">Submit Comment</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Current user info from server-side session
        const currentUser = {
            id: "<%= user.userId %>",
            name: "<%= user.username %>",
            initials: "<%= user.username ? user.username.charAt(0).toUpperCase() : 'U' %>"
        };

        // Set up event listeners
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
        });

        // Set up event listeners
        function setupEventListeners() {
            // Handle form submission with AJAX
            document.getElementById('comment-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const submitBtn = document.getElementById('submit-btn');
                const formMessages = document.getElementById('form-messages');
                const commentText = document.getElementById('comment-text').value;
                const fileInput = document.getElementById('attachment');
                const file = fileInput.files[0];
                
                if (!commentText.trim() && !file) {
                    showMessage('Please enter a comment or attach a file', 'error');
                    return;
                }

                // Disable submit button and show loading
                submitBtn.disabled = true;
                submitBtn.textContent = 'Submitting...';
                formMessages.innerHTML = '';

                try {
                    // Create FormData for file upload
                    const formData = new FormData(this);
                    
                    // Send to backend
                    const response = await fetch('/add-comment', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        // Success - reload the page to show new comment
                        showMessage('Comment added successfully!', 'success');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to add comment');
                    }
                    
                } catch (error) {
                    console.error('Error submitting comment:', error);
                    showMessage('Error submitting comment: ' + error.message, 'error');
                } finally {
                    // Re-enable submit button
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Submit Comment';
                }
            });
            
            // Handle file input display
            document.getElementById('attachment').addEventListener('change', function(e) {
                const fileName = e.target.files[0] ? e.target.files[0].name : 'Add Attachment';
                document.querySelector('.file-upload label').innerHTML = `<i class="fas fa-paperclip"></i> ${fileName}`;
            });
        }

        // Helper function to show messages
        function showMessage(message, type) {
            const formMessages = document.getElementById('form-messages');
            const alertClass = type === 'error' ? 'alert-error' : 'alert-success';
            formMessages.innerHTML = `<div class="alert ${alertClass}">${message}</div>`;
            
            // Auto-hide success messages after 3 seconds
            if (type === 'success') {
                setTimeout(() => {
                    formMessages.innerHTML = '';
                }, 3000);
            }
        }

        // Auto-scroll to bottom of comments
        function scrollToBottom() {
            const commentsList = document.getElementById('comments-list');
            commentsList.scrollTop = commentsList.scrollHeight;
        }

        // Scroll to bottom when page loads (if there are comments)
        window.addEventListener('load', scrollToBottom);
    </script>
</body>
</html>