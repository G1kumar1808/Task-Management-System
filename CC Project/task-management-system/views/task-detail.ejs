<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Details - Project Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 28px;
            border-bottom: 2px solid #eaeaea;
            padding-bottom: 10px;
        }
        
        h2 {
            color: #3498db;
            margin: 25px 0 15px;
            font-size: 22px;
        }
        
        /* Task details styles */
        .task-details {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }
        
        .task-details p {
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .task-details strong {
            color: #2c3e50;
        }
        
        .task-details a {
            color: #3498db;
            text-decoration: none;
        }
        
        .task-details a:hover {
            text-decoration: underline;
        }
        
        /* Comments section styles */
        .comments-container {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .comments-header {
            background: #3498db;
            color: white;
            padding: 15px 20px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .members-info {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .comments-list {
            padding: 20px;
            max-height: 500px;
            overflow-y: auto;
            background-color: #f8f9fa;
        }
        
        .comment {
            margin-bottom: 25px;
            max-width: 80%;
            position: relative;
        }
        
        .comment.other-user {
            margin-right: auto;
        }
        
        .comment.current-user {
            margin-left: auto;
            text-align: right;
        }
        
        .comment-header {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .comment.other-user .comment-header {
            justify-content: flex-start;
        }
        
        .comment.current-user .comment-header {
            justify-content: flex-end;
        }
        
        .user-name {
            font-weight: 600;
            color: #2c3e50;
            margin-right: 10px;
        }
        
        .comment-time {
            font-size: 12px;
            color: #7f8c8d;
        }
        
        .comment-content {
            background: #f1f3f6;
            padding: 12px 15px;
            border-radius: 18px;
            display: inline-block;
            position: relative;
        }
        
        .comment.other-user .comment-content {
            background: #e6f7ff;
            border-top-left-radius: 5px;
        }
        
        .comment.current-user .comment-content {
            background: #d4edda;
            border-top-right-radius: 5px;
        }
        
        .comment-text {
            margin-bottom: 8px;
        }
        
        .comment-attachment {
            margin-top: 8px;
        }
        
        .comment-attachment a {
            color: #3498db;
            text-decoration: none;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
        }
        
        .comment-attachment a:hover {
            text-decoration: underline;
        }
        
        .reaction-count {
            font-size: 12px;
            color: #7f8c8d;
            margin-top: 5px;
            display: flex;
            align-items: center;
        }
        
        .comment.other-user .reaction-count {
            justify-content: flex-start;
        }
        
        .comment.current-user .reaction-count {
            justify-content: flex-end;
        }
        
        .reaction-count span {
            margin-right: 5px;
        }
        
        /* Add comment form styles */
        .add-comment-form {
            background: white;
            padding: 20px;
            border-top: 1px solid #eaeaea;
        }
        
        .add-comment-form textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            resize: vertical;
            font-size: 16px;
            margin-bottom: 10px;
            transition: border-color 0.3s;
        }
        
        .add-comment-form textarea:focus {
            outline: none;
            border-color: #3498db;
        }
        
        .file-upload {
            margin-bottom: 15px;
        }
        
        .file-upload label {
            display: inline-block;
            background: #f8f9fa;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            color: #495057;
            border: 1px dashed #ced4da;
        }
        
        .file-upload input[type="file"] {
            display: none;
        }
        
        .submit-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        .submit-btn:hover {
            background: #2980b9;
        }
        
        /* No comments message */
        .no-comments {
            text-align: center;
            padding: 40px 20px;
            color: #7f8c8d;
            font-style: italic;
        }
        
        /* Status indicators */
        .online-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: #2ecc71;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        /* User avatar */
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: #3498db;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 10px;
        }
        
        .comment.other-user .user-avatar {
            background-color: #e74c3c;
        }
        
        .comment.current-user .user-avatar {
            background-color: #2ecc71;
            margin-right: 0;
            margin-left: 10px;
        }
        
        /* Task status */
        .task-status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin-left: 10px;
        }
        
        .status-in-progress {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .status-completed {
            background-color: #d4edda;
            color: #155724;
        }
        
        /* Loading indicator */
        .loading {
            text-align: center;
            padding: 20px;
            color: #7f8c8d;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .comment {
                max-width: 90%;
            }
            
            .container {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><span id="task-name">Loading...</span> <span class="task-status status-in-progress" id="task-status">In Progress</span></h1>
        <div class="task-details">
            <p><strong>Description:</strong> <span id="task-description">Loading...</span></p>
            <p><strong>Assigned to:</strong> <span id="task-assigned-to">Loading...</span></p>
            <p><strong>Created at:</strong> <span id="task-created-at">Loading...</span></p>
            <p id="task-attachment-container" style="display: none;"><strong>Attachment:</strong> <a id="task-attachment-link" href="#" target="_blank">Download</a></p>
        </div>

        <div class="comments-container">
            <div class="comments-header">
                <span>Comments</span>
                <div class="members-info"><span class="online-indicator"></span> <span id="online-count">0</span> online, <span id="members-count">0</span> members</div>
            </div>
            
            <div class="comments-list" id="comments-list">
                <div class="loading">Loading comments...</div>
            </div>

            <div class="add-comment-form">
                <h2>Add Comment</h2>
                <form id="comment-form" enctype="multipart/form-data">
                    <input type="hidden" name="taskId" id="task-id" value="">
                    <textarea name="commentText" id="comment-text" rows="4" placeholder="Enter your comment" required></textarea>
                    <div class="file-upload">
                        <label for="attachment"><i class="fas fa-paperclip"></i> Add Attachment</label>
                        <input type="file" name="attachment" id="attachment" accept="*/*">
                    </div>
                    <button type="submit" class="submit-btn">Submit Comment</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Current user info (in a real app, this would come from authentication)
        const currentUser = {
            id: "user123",
            name: "You",
            initials: "Y"
        };

        // Task ID from URL or context
        const taskId = getTaskIdFromUrl(); // You would implement this based on your routing

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadTaskDetails();
            loadComments();
            setupEventListeners();
        });

        // Load task details from DynamoDB
        async function loadTaskDetails() {
            try {
                // In a real app, you would fetch from your backend API
                // const response = await fetch(`/api/tasks/${taskId}`);
                // const task = await response.json();
                
                // Simulating API call with timeout
                setTimeout(() => {
                    // Mock task data - replace with actual API response
                    const task = {
                        id: taskId,
                        name: "Design chat interface",
                        description: "Create a modern chat interface for the project management system with real-time messaging capabilities.",
                        assignedTo: ["Alex Hunt", "Jasmin Lowery"],
                        createdAt: "2023-10-15",
                        downloadUrl: "/files/design-specifications.pdf",
                        status: "in-progress",
                        membersCount: 23,
                        onlineCount: 10
                    };
                    
                    // Update UI with task data
                    document.getElementById('task-name').textContent = task.name;
                    document.getElementById('task-description').textContent = task.description;
                    document.getElementById('task-assigned-to').textContent = task.assignedTo.join(', ');
                    document.getElementById('task-created-at').textContent = task.createdAt;
                    document.getElementById('task-id').value = task.id;
                    document.getElementById('members-count').textContent = task.membersCount;
                    document.getElementById('online-count').textContent = task.onlineCount;
                    
                    // Update task status
                    const statusElement = document.getElementById('task-status');
                    statusElement.textContent = task.status === 'completed' ? 'Completed' : 'In Progress';
                    statusElement.className = task.status === 'completed' ? 
                        'task-status status-completed' : 'task-status status-in-progress';
                    
                    // Show attachment if available
                    if (task.downloadUrl || task.fileUrl) {
                        const attachmentContainer = document.getElementById('task-attachment-container');
                        const attachmentLink = document.getElementById('task-attachment-link');
                        attachmentLink.href = task.downloadUrl || task.fileUrl;
                        attachmentLink.textContent = 'Download';
                        attachmentContainer.style.display = 'block';
                    }
                }, 500);
                
            } catch (error) {
                console.error('Error loading task details:', error);
            }
        }

        // Load comments from DynamoDB
        async function loadComments() {
            try {
                // In a real app, you would fetch from your backend API
                // const response = await fetch(`/api/tasks/${taskId}/comments`);
                // const comments = await response.json();
                
                // Simulating API call with timeout
                setTimeout(() => {
                    // Mock comments data - replace with actual API response
                    const comments = [
                        {
                            id: "comment1",
                            CommentText: "I added new flows to our design system. Now you can use them for your projects!",
                            UserID: "user456",
                            UserName: "Jasmin Lowery",
                            UserInitials: "JL",
                            CreatedAt: "09:20",
                            FileUrl: null,
                            ReactionCount: 4,
                            MentionCount: 23
                        },
                        {
                            id: "comment2",
                            CommentText: "Hey guys! Important news!",
                            UserID: "user789",
                            UserName: "Alex Hunt",
                            UserInitials: "AH",
                            CreatedAt: "09:24",
                            FileUrl: null,
                            ReactionCount: 16,
                            MentionCount: 0
                        },
                        {
                            id: "comment3",
                            CommentText: "Our intern @jchurch has successfully completed his probationary period and is now part of our team!",
                            UserID: "user789",
                            UserName: "Alex Hunt",
                            UserInitials: "AH",
                            CreatedAt: "09:24",
                            FileUrl: null,
                            ReactionCount: 5,
                            MentionCount: 2
                        },
                        {
                            id: "comment4",
                            CommentText: "Jaden, my congratulations! I will be glad to work with you on a new project",
                            UserID: currentUser.id,
                            UserName: currentUser.name,
                            UserInitials: currentUser.initials,
                            CreatedAt: "09:27",
                            FileUrl: null,
                            ReactionCount: 10,
                            MentionCount: 0
                        },
                        {
                            id: "comment5",
                            CommentText: "Looking forward to seeing the new design flows. When will they be available in the component library?",
                            UserID: "user101",
                            UserName: "Jessie Rollins",
                            UserInitials: "JR",
                            CreatedAt: "09:30",
                            FileUrl: "/files/component-updates.pdf",
                            ReactionCount: 10,
                            MentionCount: 0
                        }
                    ];
                    
                    displayComments(comments);
                }, 800);
                
            } catch (error) {
                console.error('Error loading comments:', error);
                document.getElementById('comments-list').innerHTML = '<div class="no-comments">Error loading comments</div>';
            }
        }

        // Display comments in the UI
        function displayComments(comments) {
            const commentsList = document.getElementById('comments-list');
            
            if (!comments || comments.length === 0) {
                commentsList.innerHTML = '<div class="no-comments">No comments found.</div>';
                return;
            }
            
            let commentsHTML = '';
            
            comments.forEach(comment => {
                const isCurrentUser = comment.UserID === currentUser.id;
                const commentClass = isCurrentUser ? 'comment current-user' : 'comment other-user';
                
                let reactionHTML = '';
                if (comment.ReactionCount > 0) {
                    reactionHTML = `<div class="reaction-count">
                        <span>👍</span> ${comment.ReactionCount}
                        ${comment.MentionCount > 0 ? `<span>💬</span> @${comment.MentionCount}` : ''}
                    </div>`;
                }
                
                let attachmentHTML = '';
                if (comment.FileUrl) {
                    const fileName = comment.FileUrl.split('/').pop();
                    attachmentHTML = `<div class="comment-attachment">
                        <a href="${comment.FileUrl}" target="_blank"><i class="fas fa-paperclip"></i> ${fileName}</a>
                    </div>`;
                }
                
                commentsHTML += `
                    <div class="${commentClass}" data-comment-id="${comment.id}">
                        <div class="comment-header">
                            ${isCurrentUser ? 
                                `<div class="comment-time">${comment.CreatedAt}</div>
                                 <div class="user-name">${comment.UserName}</div>
                                 <div class="user-avatar">${comment.UserInitials}</div>` :
                                `<div class="user-avatar">${comment.UserInitials}</div>
                                 <div class="user-name">${comment.UserName}</div>
                                 <div class="comment-time">${comment.CreatedAt}</div>`
                            }
                        </div>
                        <div class="comment-content">
                            <div class="comment-text">${comment.CommentText}</div>
                            ${attachmentHTML}
                        </div>
                        ${reactionHTML}
                    </div>
                `;
            });
            
            commentsList.innerHTML = commentsHTML;
        }

        // Set up event listeners
        function setupEventListeners() {
            // Handle form submission
            document.getElementById('comment-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const commentText = document.getElementById('comment-text').value;
                const fileInput = document.getElementById('attachment');
                const file = fileInput.files[0];
                
                if (!commentText.trim() && !file) return;
                
                // Create FormData for file upload
                const formData = new FormData();
                formData.append('taskId', document.getElementById('task-id').value);
                formData.append('commentText', commentText);
                if (file) {
                    formData.append('attachment', file);
                }
                
                try {
                    // In a real app, you would send to your backend API
                    // const response = await fetch('/api/comments', {
                    //     method: 'POST',
                    //     body: formData
                    // });
                    // const newComment = await response.json();
                    
                    // Simulating API call with timeout
                    setTimeout(() => {
                        // Mock new comment response
                        const now = new Date();
                        const timeString = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
                        
                        const newComment = {
                            id: 'comment' + Date.now(),
                            CommentText: commentText,
                            UserID: currentUser.id,
                            UserName: currentUser.name,
                            UserInitials: currentUser.initials,
                            CreatedAt: timeString,
                            FileUrl: file ? `/uploads/${file.name}` : null,
                            ReactionCount: 0,
                            MentionCount: 0
                        };
                        
                        // Add new comment to UI
                        addCommentToUI(newComment);
                        
                        // Clear the form
                        document.getElementById('comment-form').reset();
                        document.querySelector('.file-upload label').innerHTML = '<i class="fas fa-paperclip"></i> Add Attachment';
                        
                    }, 500);
                    
                } catch (error) {
                    console.error('Error submitting comment:', error);
                    alert('Error submitting comment. Please try again.');
                }
            });
            
            // Handle file input display
            document.getElementById('attachment').addEventListener('change', function(e) {
                const fileName = e.target.files[0] ? e.target.files[0].name : 'Add Attachment';
                document.querySelector('.file-upload label').innerHTML = `<i class="fas fa-paperclip"></i> ${fileName}`;
            });
        }

        // Add a new comment to the UI
        function addCommentToUI(comment) {
            const commentsList = document.getElementById('comments-list');
            const noCommentsElement = commentsList.querySelector('.no-comments');
            
            // Remove "no comments" message if it exists
            if (noCommentsElement) {
                noCommentsElement.remove();
            }
            
            // Remove loading message if it exists
            const loadingElement = commentsList.querySelector('.loading');
            if (loadingElement) {
                loadingElement.remove();
            }
            
            const isCurrentUser = comment.UserID === currentUser.id;
            const commentClass = isCurrentUser ? 'comment current-user' : 'comment other-user';
            
            let attachmentHTML = '';
            if (comment.FileUrl) {
                const fileName = comment.FileUrl.split('/').pop();
                attachmentHTML = `<div class="comment-attachment">
                    <a href="${comment.FileUrl}" target="_blank"><i class="fas fa-paperclip"></i> ${fileName}</a>
                </div>`;
            }
            
            const commentHTML = `
                <div class="${commentClass}" data-comment-id="${comment.id}">
                    <div class="comment-header">
                        ${isCurrentUser ? 
                            `<div class="comment-time">${comment.CreatedAt}</div>
                             <div class="user-name">${comment.UserName}</div>
                             <div class="user-avatar">${comment.UserInitials}</div>` :
                            `<div class="user-avatar">${comment.UserInitials}</div>
                             <div class="user-name">${comment.UserName}</div>
                             <div class="comment-time">${comment.CreatedAt}</div>`
                        }
                    </div>
                    <div class="comment-content">
                        <div class="comment-text">${comment.CommentText}</div>
                        ${attachmentHTML}
                    </div>
                    <div class="reaction-count">
                        <span>👍</span> 0
                    </div>
                </div>
            `;
            
            commentsList.insertAdjacentHTML('beforeend', commentHTML);
            
            // Scroll to the new comment
            const newComment = commentsList.lastElementChild;
            newComment.scrollIntoView({ behavior: 'smooth' });
        }

        // Helper function to extract task ID from URL
        function getTaskIdFromUrl() {
            // In a real app, you would extract from URL parameters or path
            // For example: /tasks/123 -> returns "123"
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get('taskId') || 'task123'; // Default for demo
        }
    </script>
</body>
</html>