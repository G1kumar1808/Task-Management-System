<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= task.name %> - Task Details</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 28px;
            border-bottom: 2px solid #eaeaea;
            padding-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        h2 {
            color: #3498db;
            margin: 25px 0 15px;
            font-size: 22px;
        }
        
        /* Task details styles */
        .task-details {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }
        
        .task-details p {
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .task-details strong {
            color: #2c3e50;
        }
        
        .task-details a {
            color: #3498db;
            text-decoration: none;
        }
        
        .task-details a:hover {
            text-decoration: underline;
        }
        
        /* Action buttons */
        .action-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 8px 16px;
            border-radius: 5px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        
        .btn-primary {
            background: #3498db;
            color: white;
        }
        
        .btn-primary:hover {
            background: #2980b9;
        }
        
        .btn-secondary {
            background: #95a5a6;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #7f8c8d;
        }
        
        .btn-outline {
            background: transparent;
            color: #3498db;
            border: 1px solid #3498db;
        }
        
        .btn-outline:hover {
            background: #3498db;
            color: white;
        }
        
        .btn-warning {
            background: #f39c12;
            color: white;
        }
        
        .btn-warning:hover {
            background: #e67e22;
        }
        
        /* Comments section styles */
        .comments-container {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .comments-header {
            background: #3498db;
            color: white;
            padding: 15px 20px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .members-info {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .comments-list {
            padding: 20px;
            max-height: 500px;
            overflow-y: auto;
            background-color: #f8f9fa;
        }
        
        .comment {
            margin-bottom: 25px;
            max-width: 80%;
            position: relative;
        }
        
        .comment.other-user {
            margin-right: auto;
        }
        
        .comment.current-user {
            margin-left: auto;
            text-align: right;
        }
        
        .comment-header {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .comment.other-user .comment-header {
            justify-content: flex-start;
        }
        
        .comment.current-user .comment-header {
            justify-content: flex-end;
        }
        
        .user-name {
            font-weight: 600;
            color: #2c3e50;
            margin-right: 10px;
        }
        
        .comment-time {
            font-size: 12px;
            color: #7f8c8d;
        }
        
        .comment-content {
            background: #f1f3f6;
            padding: 12px 15px;
            border-radius: 18px;
            display: inline-block;
            position: relative;
        }
        
        .comment.other-user .comment-content {
            background: #e6f7ff;
            border-top-left-radius: 5px;
        }
        
        .comment.current-user .comment-content {
            background: #d4edda;
            border-top-right-radius: 5px;
        }
        
        .comment-text {
            margin-bottom: 8px;
        }
        
        .comment-attachments {
            margin-top: 8px;
        }
        
        .comment-attachment {
            display: block;
            margin-bottom: 5px;
        }
        
        .comment-attachment button {
            color: #3498db;
            text-decoration: none;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            padding: 4px 8px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 4px;
            transition: background-color 0.3s;
            border: none;
            cursor: pointer;
        }
        
        .comment-attachment button:hover {
            background: rgba(255, 255, 255, 0.9);
            text-decoration: underline;
        }
        
        .comment-attachment button:disabled {
            background: #f8f9fa;
            color: #6c757d;
            cursor: not-allowed;
        }
        
        .reaction-count {
            font-size: 12px;
            color: #7f8c8d;
            margin-top: 5px;
            display: flex;
            align-items: center;
        }
        
        .comment.other-user .reaction-count {
            justify-content: flex-start;
        }
        
        .comment.current-user .reaction-count {
            justify-content: flex-end;
        }
        
        .reaction-count span {
            margin-right: 5px;
        }
        
        /* Add comment form styles */
        .add-comment-form {
            background: white;
            padding: 20px;
            border-top: 1px solid #eaeaea;
        }
        
        .add-comment-form textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            resize: vertical;
            font-size: 16px;
            margin-bottom: 10px;
            transition: border-color 0.3s;
        }
        
        .add-comment-form textarea:focus {
            outline: none;
            border-color: #3498db;
        }
        
        .file-upload {
            margin-bottom: 15px;
        }
        
        .file-upload label {
            display: inline-block;
            background: #f8f9fa;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            color: #495057;
            border: 1px dashed #ced4da;
            transition: all 0.3s;
        }
        
        .file-upload label:hover {
            background: #e9ecef;
        }
        
        .file-upload input[type="file"] {
            display: none;
        }
        
        .selected-files {
            margin-top: 10px;
        }
        
        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 4px;
            margin-bottom: 5px;
            font-size: 14px;
        }
        
        .file-item:last-child {
            margin-bottom: 0;
        }
        
        .remove-file {
            background: none;
            border: none;
            color: #dc3545;
            cursor: pointer;
            font-size: 16px;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .remove-file:hover {
            color: #c82333;
        }
        
        .submit-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        .submit-btn:hover {
            background: #2980b9;
        }
        
        .submit-btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }
        
        /* No comments message */
        .no-comments {
            text-align: center;
            padding: 40px 20px;
            color: #7f8c8d;
            font-style: italic;
        }
        
        /* Status indicators */
        .online-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: #2ecc71;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        /* User avatar */
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: #3498db;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 10px;
            font-size: 14px;
        }
        
        .comment.other-user .user-avatar {
            background-color: #e74c3c;
        }
        
        .comment.current-user .user-avatar {
            background-color: #2ecc71;
            margin-right: 0;
            margin-left: 10px;
        }
        
        /* Task status */
        .task-status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin-left: 10px;
        }
        
        .status-in-progress {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .status-completed {
            background-color: #d4edda;
            color: #155724;
        }
        
        /* Loading indicator */
        .loading {
            text-align: center;
            padding: 20px;
            color: #7f8c8d;
        }
        
        /* Alert messages */
        .alert {
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 16px;
            font-size: 14px;
        }
        
        .alert-error {
            background-color: #fee;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        
        .alert-success {
            background-color: #eff;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        
        /* Loading Spinner */
        .loading-spinner {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .spinner-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Edit button specific styles */
        .edit-indicator {
            font-size: 12px;
            color: #7f8c8d;
            font-style: italic;
            margin-left: 10px;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .comment {
                max-width: 90%;
            }
            
            .container {
                padding: 10px;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            h1 {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="loading-spinner">
        <div class="spinner-content">
            <div class="spinner"></div>
            <p>Generating download link...</p>
        </div>
    </div>

    <div class="container">
        <h1>
            <span>
                <%= task.name %> 
                <span class="task-status status-in-progress">In Progress</span>
                <% if (user && user.userId === task.createdBy) { %>
                    <span class="edit-indicator">(You created this task)</span>
                <% } %>
            </span>
            <div class="action-buttons">
                <a href="/view-tasks" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Tasks
                </a>
                <% if (user && user.userId === task.createdBy) { %>
                    <a href="/edit-task/<%= task.id %>" class="btn btn-warning">
                        <i class="fas fa-edit"></i> Edit Task
                    </a>
                <% } %>
                <a href="/task/<%= task.id %>/files" class="btn btn-primary">
                    <i class="fas fa-folder"></i> View Files
                </a>
            </div>
        </h1>
        
        <div class="task-details">
            <p><strong>Description:</strong> <%= task.description %></p>
            <p><strong>Assigned to:</strong> 
                <% if (task.assignedToUsernames && task.assignedToUsernames.length > 0) { %>
                    <%= task.assignedToUsernames.join(', ') %>
                <% } else { %>
                    No one assigned
                <% } %>
            </p>
            <p><strong>Created at:</strong> <%= new Date(task.createdAt).toLocaleString() %></p>
            <p><strong>Created by:</strong> <%= task.createdByUsername || 'Unknown' %></p>
            <% if (task.fileKey || task.fileUrl) { %>
                <p><strong>Task Attachment:</strong> 
                    <button class="btn btn-outline download-task-file-btn" 
                            data-task-id="<%= task.id %>"
                            data-file-name="<%= task.name %>">
                        <i class="fas fa-download"></i> Download File
                    </button>
                </p>
            <% } %>
        </div>

        <div class="comments-container">
            <div class="comments-header">
                <span>Comments</span>
                <div class="members-info">
                    <span class="online-indicator"></span> 
                    <span id="online-count"><%= task.assignedToUsernames ? task.assignedToUsernames.length + 1 : 1 %></span> members
                </div>
            </div>
            
            <div class="comments-list" id="comments-list">
                <% if (!comments || comments.length === 0) { %>
                    <div class="no-comments">No comments yet. Be the first to comment!</div>
                <% } else { %>
                    <% comments.forEach(comment => { %>
                        <div class="comment <%= comment.UserID === user.userId ? 'current-user' : 'other-user' %>" data-comment-id="<%= comment.CommentID %>">
                            <div class="comment-header">
                                <% if (comment.UserID === user.userId) { %>
                                    <div class="comment-time"><%= formatTime(comment.CreatedAt) %></div>
                                    <div class="user-name"><%= comment.Username || 'You' %></div>
                                    <div class="user-avatar"><%= getInitials(comment.Username || 'You') %></div>
                                <% } else { %>
                                    <div class="user-avatar"><%= getInitials(comment.Username || 'User') %></div>
                                    <div class="user-name"><%= comment.Username || 'User' %></div>
                                    <div class="comment-time"><%= formatTime(comment.CreatedAt) %></div>
                                <% } %>
                            </div>
                            <div class="comment-content">
                                <div class="comment-text"><%= comment.CommentText %></div>
                                <% if (comment.FileKeys && comment.FileKeys.length > 0) { %>
                                    <div class="comment-attachments">
                                        <% comment.FileKeys.forEach((fileKey, index) => { %>
                                            <div class="comment-attachment">
                                                <button class="download-comment-file-btn" 
                                                        data-comment-id="<%= comment.CommentID %>"
                                                        data-task-id="<%= task.id %>"
                                                        data-file-index="<%= index %>"
                                                        data-file-name="<%= comment.FileNames && comment.FileNames[index] ? comment.FileNames[index] : 'Attachment' + (index + 1) %>">
                                                    <i class="fas fa-paperclip"></i> 
                                                    <%= comment.FileNames && comment.FileNames[index] ? comment.FileNames[index] : 'Attachment ' + (index + 1) %>
                                                </button>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else if (comment.FileKey || comment.FileUrl) { %>
                                    <!-- Legacy single file support -->
                                    <div class="comment-attachments">
                                        <div class="comment-attachment">
                                            <button class="download-comment-file-btn" 
                                                    data-comment-id="<%= comment.CommentID %>"
                                                    data-task-id="<%= task.id %>"
                                                    data-file-name="<%= comment.CommentText ? comment.CommentText.substring(0, 20) + '...' : 'Attachment' %>">
                                                <i class="fas fa-paperclip"></i> Download Attachment
                                            </button>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            </div>

            <div class="add-comment-form">
                <h2>Add Comment</h2>
                <div id="form-messages"></div>
                <form id="comment-form" action="/add-comment" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="taskId" value="<%= task.id %>">
                    <textarea name="commentText" id="comment-text" rows="4" placeholder="Enter your comment"></textarea>
                    <div class="file-upload">
                <label for="attachments">
                            <i class="fas fa-paperclip"></i> 
                            <span id="file-label">Add Attachments (Multiple files allowed)</span>
                        </label>
                    <input type="file" name="attachments" id="attachments" accept="*/*" multiple>
                    </div>
                    <div class="selected-files" id="selected-files"></div>
                    <button type="submit" class="submit-btn" id="submit-btn">
                        <i class="fas fa-paper-plane"></i> Submit Comment
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Current user info from server-side session
        const currentUser = {
            id: "<%= user.userId %>",
            name: "<%= user.username %>",
            initials: "<%= user.username ? getInitials(user.username) : 'U' %>"
        };

        // Set up event listeners
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
        });

        // Set up event listeners
        function setupEventListeners() {
            const loadingSpinner = document.getElementById('loadingSpinner');
            
            // Handle form submission with AJAX
            document.getElementById('comment-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const submitBtn = document.getElementById('submit-btn');
                const formMessages = document.getElementById('form-messages');
                const commentText = document.getElementById('comment-text').value;
                    const fileInput = document.getElementById('attachments');
                const files = fileInput.files;
                
                if (!commentText.trim() && files.length === 0) {
                    showMessage('Please enter a comment or attach at least one file', 'error');
                    return;
                }

                // Disable submit button and show loading
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
                formMessages.innerHTML = '';

                try {
                    // Create FormData for file upload
                    const formData = new FormData(this);
                    
                    // Send to backend
                    const response = await fetch('/add-comment', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        // Success - reload the page to show new comment
                        showMessage('Comment added successfully!', 'success');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to add comment');
                    }
                    
                } catch (error) {
                    console.error('Error submitting comment:', error);
                    showMessage('Error submitting comment: ' + error.message, 'error');
                } finally {
                    // Re-enable submit button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Comment';
                }
            });
            
            // Handle multiple file input display
            document.getElementById('attachments').addEventListener('change', function(e) {
                const selectedFilesContainer = document.getElementById('selected-files');
                selectedFilesContainer.innerHTML = '';
                
                if (this.files.length > 0) {
                    document.getElementById('file-label').textContent = `${this.files.length} file(s) selected`;
                    
                    Array.from(this.files).forEach((file, index) => {
                        const fileItem = document.createElement('div');
                        fileItem.className = 'file-item';
                        fileItem.innerHTML = `
                            <span>${file.name}</span>
                            <button type="button" class="remove-file" data-index="${index}">
                                <i class="fas fa-times"></i>
                            </button>
                        `;
                        selectedFilesContainer.appendChild(fileItem);
                    });
                    
                    // Add event listeners to remove buttons
                    document.querySelectorAll('.remove-file').forEach(btn => {
                        btn.addEventListener('click', function() {
                            const index = parseInt(this.getAttribute('data-index'));
                            removeFileFromInput(index);
                        });
                    });
                } else {
                    document.getElementById('file-label').textContent = 'Add Attachments (Multiple files allowed)';
                }
            });

            // Handle task file download
            document.querySelectorAll('.download-task-file-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const taskId = this.getAttribute('data-task-id');
                    const fileName = this.getAttribute('data-file-name') || 'download';
                    
                    // Show loading spinner
                    loadingSpinner.style.display = 'flex';
                    this.disabled = true;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Downloading...';
                    
                    try {
                        console.log('Requesting download for task:', taskId);
                        
                        // Get fresh download URL from server
                        const response = await fetch(`/download-file/${taskId}`);
                        
                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                        }
                        
                        const data = await response.json();
                        
                        if (data.downloadUrl) {
                            console.log('Download URL received, starting download...');
                            
                            // Create a temporary anchor element to trigger download
                            const a = document.createElement('a');
                            a.href = data.downloadUrl;
                            a.download = fileName;
                            a.target = '_blank';
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);
                            
                            console.log('Download initiated successfully');
                        } else {
                            throw new Error('No download URL received from server');
                        }
                    } catch (error) {
                        console.error('Download error:', error);
                        alert('Failed to download file: ' + error.message);
                    } finally {
                        // Hide loading spinner and reset button
                        loadingSpinner.style.display = 'none';
                        this.disabled = false;
                        this.innerHTML = '<i class="fas fa-download"></i> Download File';
                    }
                });
            });

            // Handle comment file downloads
            document.querySelectorAll('.download-comment-file-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const taskId = this.getAttribute('data-task-id');
                    const commentId = this.getAttribute('data-comment-id');
                    const fileName = this.getAttribute('data-file-name') || 'attachment';
                    const fileIndex = this.getAttribute('data-file-index');
                    
                    // Show loading spinner
                    loadingSpinner.style.display = 'flex';
                    this.disabled = true;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Downloading...';
                    
                    try {
                        console.log(`Requesting download for comment:`, taskId, commentId, fileIndex);
                        
                        // Build URL based on download type
                        let url = `/download-file/${taskId}`;
                        const params = new URLSearchParams();
                        
                        if (commentId) {
                            params.append('commentId', commentId);
                        }
                        
                        if (fileIndex !== null) {
                            params.append('fileIndex', fileIndex);
                        }
                        
                        if (params.toString()) {
                            url += `?${params.toString()}`;
                        }
                        
                        // Get fresh download URL from server
                        const response = await fetch(url);
                        
                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                        }
                        
                        const data = await response.json();
                        
                        if (data.downloadUrl) {
                            console.log('Download URL received, starting download...');
                            
                            // Create a temporary anchor element to trigger download
                            const a = document.createElement('a');
                            a.href = data.downloadUrl;
                            a.download = fileName;
                            a.target = '_blank';
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);
                            
                            console.log('Download initiated successfully');
                        } else {
                            throw new Error('No download URL received from server');
                        }
                    } catch (error) {
                        console.error('Download error:', error);
                        alert('Failed to download file: ' + error.message);
                    } finally {
                        // Hide loading spinner and reset button
                        loadingSpinner.style.display = 'none';
                        this.disabled = false;
                        this.innerHTML = '<i class="fas fa-paperclip"></i> ' + fileName;
                    }
                });
            });
        }

        // Remove file from input
        function removeFileFromInput(index) {
            const fileInput = document.getElementById('attachments');
            const files = Array.from(fileInput.files);
            files.splice(index, 1);
            
            // Create new FileList (we need to use DataTransfer as FileList is read-only)
            const dataTransfer = new DataTransfer();
            files.forEach(file => dataTransfer.items.add(file));
            fileInput.files = dataTransfer.files;
            
            // Trigger change event to update UI
            const event = new Event('change');
            fileInput.dispatchEvent(event);
        }

        // Helper function to show messages
        function showMessage(message, type) {
            const formMessages = document.getElementById('form-messages');
            const alertClass = type === 'error' ? 'alert-error' : 'alert-success';
            formMessages.innerHTML = `<div class="alert ${alertClass}">${message}</div>`;
            
            // Auto-hide success messages after 3 seconds
            if (type === 'success') {
                setTimeout(() => {
                    formMessages.innerHTML = '';
                }, 3000);
            }
        }

        // Auto-scroll to bottom of comments
        function scrollToBottom() {
            const commentsList = document.getElementById('comments-list');
            commentsList.scrollTop = commentsList.scrollHeight;
        }

        // Scroll to bottom when page loads (if there are comments)
        window.addEventListener('load', scrollToBottom);
    </script>
</body>
</html>