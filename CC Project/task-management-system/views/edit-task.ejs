<%- include('partials/header', { title: 'Edit Task', user: user }) %>

<div class="container">
    <div class="task-form-container">
        <div class="form-header">
            <h1>‚úèÔ∏è Edit Task</h1>
            <a href="/task/<%= task.id %>" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Task
            </a>
        </div>

        <% if (typeof message !== 'undefined' && message) { %>
            <div class="alert alert-error">
                <%= message %>
            </div>
        <% } %>

        <form id="editTaskForm" action="/update-task/<%= task.id %>" method="POST">
            <div class="form-group">
                <label for="taskName">Task Name</label>
                <input type="text" id="taskName" name="taskName" class="form-control" 
                       value="<%= task.name %>" placeholder="Enter task name" required>
            </div>

            <div class="form-group">
                <label for="taskDescription">Task Description</label>
                <textarea id="taskDescription" name="taskDescription" class="form-control" 
                          placeholder="Describe the task details..." rows="5" required><%= task.description %></textarea>
            </div>

            <div class="form-group">
                <label for="userSearch">Search and Assign Users</label>
                <input type="text" id="userSearch" class="form-control" placeholder="Type username or email to search...">
                
                <div id="searchResults" class="search-results-container">
                    <div class="no-results">Start typing to search for users</div>
                </div>
                
                <label for="assignedUsers" style="margin-top: 1rem;">Selected Users</label>
                <div id="selectedUsers" class="selected-users-container">
                    <% if (task.assignedToUsernames && task.assignedToUsernames.length > 0) { %>
                        <% task.assignedToUsernames.forEach((username, index) => { %>
                            <div class="selected-user-item">
                                <div class="user-info">
                                    <strong><%= username %></strong>
                                    <span><%= task.assignedTo[index] %></span>
                                </div>
                                <button type="button" class="remove-user-btn" data-user-id="<%= task.assignedTo[index] %>">√ó</button>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="no-selection">No users selected yet</div>
                    <% } %>
                </div>
                <input type="hidden" id="assignedUsers" name="assignedUsers" value="<%= task.assignedTo ? task.assignedTo.join(',') : '' %>">
                
                <small style="display: block; margin-top: 0.5rem; color: var(--gray);">Type username or email to search and click "+ Add" to assign them to this task</small>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary btn-full" id="updateBtn">Update Task</button>
                <a href="/task/<%= task.id %>" class="btn btn-outline btn-full">Cancel</a>
                <!-- Delete button (danger) -->
                <button type="button" id="deleteBtn" class="btn btn-danger btn-full" style="margin-left: 8px;">üóëÔ∏è Delete Task</button>
            </div>
        </form>
    </div>
</div>

<%- include('partials/footer') %>

<!-- Confirmation modal (hidden by default) -->
<div id="confirmModal" class="confirm-modal" style="display:none;">
    <div class="confirm-modal-content">
        <h3>Confirm Delete</h3>
        <p>Are you sure you want to delete this task? This action is permanent and will remove the task and its attachments from the S3 bucket.</p>
        <div class="confirm-actions">
            <button id="confirmCancel" class="btn btn-outline">Cancel</button>
            <button id="confirmDelete" class="btn btn-danger">Yes, delete</button>
        </div>
    </div>
</div>

<script>
    const searchInput = document.getElementById('userSearch');
    const resultsDiv = document.getElementById('searchResults');
    const selectedUsersDiv = document.getElementById('selectedUsers');
    const assignedUsersInput = document.getElementById('assignedUsers');
    const form = document.getElementById('editTaskForm');

    // Initialize selected users from existing assignments
    let selectedUsers = <%- JSON.stringify((task.assignedTo && Array.isArray(task.assignedTo) && task.assignedToUsernames && Array.isArray(task.assignedToUsernames)) ? task.assignedTo.map((userId, index) => ({
        UserID: userId,
        Username: task.assignedToUsernames[index] || '',
        Email: ''
    })).filter(user => user.Username) : []) %>;

    // Real-time searching as user types
    searchInput.addEventListener('input', async () => {
        const query = searchInput.value.trim();
        
        resultsDiv.innerHTML = ''; // Clear previous results
        resultsDiv.classList.remove('active'); // Hide results container by default

        if (query === '') {
            resultsDiv.innerHTML = '<div class="no-results">Start typing to search for users</div>';
            return;
        }

        try {
            resultsDiv.innerHTML = '<div class="loading-users">Searching users...</div>';

            const res = await fetch(`/search-users?q=${encodeURIComponent(query)}`);

            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }

            const data = await res.json();
            const users = Array.isArray(data) ? data : (data.users || []);

            if (!Array.isArray(users)) {
                throw new Error('Invalid response format');
            }

            displaySearchResults(users);
        } catch (err) {
            console.error('Failed to search users:', err);
            resultsDiv.innerHTML = '<div class="no-results">Error searching users. Please try again.</div>';
        }
    });

    function displaySearchResults(users) {
        resultsDiv.innerHTML = '';
        
        if (users.length === 0) {
            resultsDiv.innerHTML = '<div class="no-results">No users found</div>';
            return;
        }

        resultsDiv.classList.add('active');

        users.forEach(user => {
            if (selectedUsers.find(u => u.UserID === user.UserID)) return;

            const userElement = document.createElement('div');
            userElement.className = 'search-result-item';
            userElement.innerHTML = `
                <div class="user-info">
                    <strong>${user.Username || 'Unknown User'}</strong>
                    <span>${user.Email || 'No email'}</span>
                </div>
                <button type="button" class="add-user-btn">+ Add</button>
            `;
            
            userElement.querySelector('.add-user-btn').addEventListener('click', () => {
                addUserToSelection(user);
                displaySearchResults(users.filter(u => u.UserID !== user.UserID));
            });
            
            resultsDiv.appendChild(userElement);
        });
    }

    function addUserToSelection(user) {
        if (!selectedUsers.find(u => u.UserID === user.UserID)) {
            selectedUsers.push(user);
            updateSelectedUsersDisplay();
            updateHiddenInput();
        }
    }

    function removeUserFromSelection(userId) {
        selectedUsers = selectedUsers.filter(user => user.UserID !== userId);
        updateSelectedUsersDisplay();
        updateHiddenInput();
        
        if (searchInput.value.trim() !== '') {
            searchInput.dispatchEvent(new Event('input'));
        }
    }

    function updateSelectedUsersDisplay() {
        selectedUsersDiv.innerHTML = '';
        
        if (selectedUsers.length === 0) {
            selectedUsersDiv.innerHTML = '<div class="no-selection">No users selected yet</div>';
            return;
        }

        selectedUsers.forEach(user => {
            const selectedElement = document.createElement('div');
            selectedElement.className = 'selected-user-item';
            selectedElement.innerHTML = `
                <div class="user-info">
                    <strong>${user.Username || 'Unknown'}</strong>
                    <span>${user.Email || 'No email'}</span>
                </div>
                <button type="button" class="remove-user-btn">√ó</button>
            `;
            
            selectedElement.querySelector('.remove-user-btn').addEventListener('click', () => {
                removeUserFromSelection(user.UserID);
            });
            
            selectedUsersDiv.appendChild(selectedElement);
        });
    }

    function updateHiddenInput() {
        assignedUsersInput.value = selectedUsers.map(user => user.UserID).join(',');
    }

    // Initialize the display
    updateSelectedUsersDisplay();

    // Add event listeners to existing remove buttons
    document.querySelectorAll('.selected-user-item .remove-user-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const userId = this.getAttribute('data-user-id');
            removeUserFromSelection(userId);
        });
    });

    // ---------- Delete task logic ----------
    const deleteBtn = document.getElementById('deleteBtn');
    const confirmModal = document.getElementById('confirmModal');
    const confirmCancel = document.getElementById('confirmCancel');
    const confirmDelete = document.getElementById('confirmDelete');
    const updateBtn = document.getElementById('updateBtn');

    function showModal() {
        confirmModal.style.display = 'flex';
    }

    function hideModal() {
        confirmModal.style.display = 'none';
    }

    deleteBtn.addEventListener('click', (e) => {
        e.preventDefault();
        showModal();
    });

    confirmCancel.addEventListener('click', (e) => {
        e.preventDefault();
        hideModal();
    });

    confirmDelete.addEventListener('click', async (e) => {
        e.preventDefault();
        // Disable UI
        confirmDelete.disabled = true;
        confirmCancel.disabled = true;
        updateBtn.disabled = true;
        deleteBtn.disabled = true;

        try {
            const taskId = "<%= task.id %>";
            // call DELETE endpoint - expects server-side route to perform full cleanup (DynamoDB + S3)
            const resp = await fetch(`/delete-task/${encodeURIComponent(taskId)}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'same-origin'
            });

            if (!resp.ok) {
                const errorBody = await resp.json().catch(() => ({}));
                const errMsg = errorBody.error || `HTTP ${resp.status}`;
                throw new Error(errMsg);
            }

            // success -> redirect to view-tasks
            window.location.href = '/view-tasks';
        } catch (err) {
            console.error('Delete failed:', err);
            alert('Failed to delete task: ' + (err.message || 'Unknown error'));
            // re-enable UI
            confirmDelete.disabled = false;
            confirmCancel.disabled = false;
            updateBtn.disabled = false;
            deleteBtn.disabled = false;
            hideModal();
        }
    });

    // close modal when clicking outside
    window.addEventListener('click', (ev) => {
        if (ev.target === confirmModal) hideModal();
    });
</script>

<style>
    :root {
        --primary: #4361ee;
        --primary-dark: #3a56d4;
        --gray-light: #e9ecef;
        --gray: #6c757d;
        --dark: #212529;
        --border-radius: 8px;
        --transition: all 0.3s ease;
    }

    .container {
        margin-top: 2rem;
        padding: 0 15px;
    }

    .task-form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .form-header h1 {
        margin: 0;
        color: var(--dark);
    }

    .form-group {
        margin-bottom: 1.8rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.7rem;
        font-weight: 600;
        color: var(--dark);
        font-size: 1rem;
    }

    .search-results-container {
        margin-top: 8px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        max-height: 200px;
        overflow-y: auto;
        background: white;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        display: none;
    }

    .search-results-container.active {
        display: block;
    }

    .search-result-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        border-bottom: 1px solid var(--gray-light);
        transition: var(--transition);
        cursor: pointer;
    }

    .search-result-item:hover {
        background: #f8f9fa;
    }

    .search-result-item:last-child {
        border-bottom: none;
    }

    .user-info {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .user-info strong {
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 2px;
    }

    .user-info span {
        font-size: 0.85rem;
        color: var(--gray);
    }

    .add-user-btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 6px 16px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 0.85rem;
        font-weight: 500;
        transition: var(--transition);
        white-space: nowrap;
        margin-left: 10px;
    }

    .add-user-btn:hover {
        background: var(--primary-dark);
        transform: translateY(-1px);
    }

    .selected-users-container {
        margin-top: 10px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        padding: 12px;
        background: #fafbff;
        min-height: 70px;
    }

    .selected-user-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 14px;
        margin-bottom: 8px;
        background: white;
        border-radius: var(--border-radius);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        border-left: 4px solid var(--primary);
    }

    .remove-user-btn {
        background: #e63946;
        color: white;
        border: none;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
        font-weight: bold;
    }

    .remove-user-btn:hover {
        background: #d00000;
        transform: scale(1.1);
    }

    .no-results, .no-selection, .loading-users {
        padding: 20px;
        text-align: center;
        color: var(--gray);
        font-style: italic;
    }

    .loading-users {
        color: var(--primary);
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        font-size: 1rem;
        transition: var(--transition);
        background: white;
        box-sizing: border-box;
    }

    /* Confirmation modal styles */
    .confirm-modal {
        position: fixed;
        inset: 0;
        display: none;
        background: rgba(0,0,0,0.5);
        justify-content: center;
        align-items: center;
        z-index: 2000;
    }
    .confirm-modal-content {
        width: 520px;
        max-width: calc(100% - 40px);
        background: white;
        border-radius: 12px;
        padding: 24px;
        text-align: left;
        box-shadow: 0 6px 24px rgba(0,0,0,0.2);
    }
    .confirm-modal-content h3 {
        margin-top: 0;
        margin-bottom: 8px;
    }
    .confirm-modal-content p {
        color: var(--gray);
        margin-bottom: 18px;
    }
    .confirm-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    .btn-full {
        display: inline-block;
        padding: 10px 16px;
        border-radius: 8px;
        cursor: pointer;
        border: none;
    }

    .btn-danger {
        background: #e63946;
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid var(--gray-light);
        color: var(--dark);
    }

    .btn-primary {
        background: var(--primary);
        color: white;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }
</style>