<%- include('partials/header', { title: title, user: user }) %>

<div class="container">
    <div class="task-form-container">
        <h1>➕ Create New Task</h1>

        <% if (typeof message !== 'undefined' && message) { %>
            <div class="alert alert-error">
                <%= message %>
            </div>
        <% } %>

        <form id="createTaskForm" action="/create-task" method="POST">
            <div class="form-group">
                <label for="taskName">Task Name</label>
                <input type="text" id="taskName" name="taskName" class="form-control" placeholder="Enter task name" required>
            </div>

            <div class="form-group">
                <label for="taskDescription">Task Description</label>
                <textarea id="taskDescription" name="taskDescription" class="form-control" placeholder="Describe the task details..." rows="5" required></textarea>
            </div>

            <div class="form-group">
                <label for="fileAttached">Attach File (Optional)</label>
                <input type="file" id="fileAttached" name="fileAttached" class="form-control">
            </div>

            <div class="form-group">
                <label for="userSearch">Search and Assign Users</label>
                <input type="text" id="userSearch" class="form-control" placeholder="Type to filter users...">
                
                <div id="searchResults" class="search-results-container">
                    <div class="loading-users">Loading users...</div>
                </div>
                
                <label for="assignedUsers" style="margin-top: 1rem;">Selected Users</label>
                <div id="selectedUsers" class="selected-users-container">
                    <div class="no-selection">No users selected yet</div>
                </div>
                <input type="hidden" id="assignedUsers" name="assignedUsers">
                
                <small style="display: block; margin-top: 0.5rem; color: var(--gray);">Type to filter users and click "+ Add" to assign them to this task</small>
            </div>

            <button type="submit" class="btn btn-primary btn-full">Create Task</button>
        </form>
    </div>
</div>

<%- include('partials/footer') %>

<script>
    const searchInput = document.getElementById('userSearch');
    const resultsDiv = document.getElementById('searchResults');
    const selectedUsersDiv = document.getElementById('selectedUsers');
    const assignedUsersInput = document.getElementById('assignedUsers');
    const form = document.getElementById('createTaskForm');
    const fileInput = document.getElementById('fileAttached');

    let selectedUsers = [];
    let allUsers = [];

    // Load all users on page load
    document.addEventListener('DOMContentLoaded', async () => {
        try {
            console.log('Loading users...');
            const res = await fetch('/search-users?q=');
            
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            
            const users = await res.json();
            console.log('Loaded users:', users);
            
            if (Array.isArray(users)) {
                allUsers = users;
                displayAllUsers();
            } else {
                throw new Error('Invalid response format');
            }
        } catch (err) {
            console.error('Failed to load users:', err);
            resultsDiv.innerHTML = '<div class="no-results">Error loading users. Please refresh the page.</div>';
        }
    });

    // Display all users initially
    function displayAllUsers() {
        if (allUsers.length === 0) {
            resultsDiv.innerHTML = '<div class="no-results">No users available</div>';
            return;
        }

        displaySearchResults(allUsers);
    }

    // Real-time filtering as user types
    searchInput.addEventListener('input', () => {
        const query = searchInput.value.trim().toLowerCase();
        
        if (query === '') {
            // Show all users when search is empty
            displayAllUsers();
            return;
        }

        // Filter users based on search query
        const filteredUsers = allUsers.filter(user => 
            (user.Username && user.Username.toLowerCase().includes(query)) || 
            (user.Email && user.Email.toLowerCase().includes(query))
        );

        displaySearchResults(filteredUsers);
    });

    function displaySearchResults(users) {
        resultsDiv.innerHTML = '';
        
        if (users.length === 0) {
            resultsDiv.innerHTML = '<div class="no-results">No users found</div>';
            return;
        }

        users.forEach(user => {
            // Skip if user is already selected
            if (selectedUsers.find(u => u.UserID === user.UserID)) return;

            const userElement = document.createElement('div');
            userElement.className = 'search-result-item';
            userElement.innerHTML = `
                <div class="user-info">
                    <strong>${user.Username || 'Unknown User'}</strong>
                    <span>${user.Email || 'No email'}</span>
                </div>
                <button type="button" class="add-user-btn">+ Add</button>
            `;
            
            userElement.querySelector('.add-user-btn').addEventListener('click', () => {
                addUserToSelection(user);
                // Re-filter to update the list (remove the selected user)
                const currentQuery = searchInput.value.trim().toLowerCase();
                if (currentQuery === '') {
                    displayAllUsers();
                } else {
                    const filtered = allUsers.filter(u => 
                        ((u.Username && u.Username.toLowerCase().includes(currentQuery)) || 
                         (u.Email && u.Email.toLowerCase().includes(currentQuery))) &&
                        !selectedUsers.find(selected => selected.UserID === u.UserID)
                    );
                    displaySearchResults(filtered);
                }
            });
            
            resultsDiv.appendChild(userElement);
        });
    }

    function addUserToSelection(user) {
        if (!selectedUsers.find(u => u.UserID === user.UserID)) {
            selectedUsers.push(user);
            updateSelectedUsersDisplay();
            updateAssignedUsersInput();
        }
    }

    function removeUserFromSelection(userId) {
        selectedUsers = selectedUsers.filter(user => user.UserID !== userId);
        updateSelectedUsersDisplay();
        updateAssignedUsersInput();
        
        // Refresh the user list to show the removed user again
        const currentQuery = searchInput.value.trim().toLowerCase();
        if (currentQuery === '') {
            displayAllUsers();
        } else {
            const filtered = allUsers.filter(user => 
                (user.Username && user.Username.toLowerCase().includes(currentQuery)) || 
                (user.Email && user.Email.toLowerCase().includes(currentQuery))
            );
            displaySearchResults(filtered);
        }
    }

    function updateSelectedUsersDisplay() {
        selectedUsersDiv.innerHTML = '';
        
        if (selectedUsers.length === 0) {
            selectedUsersDiv.innerHTML = '<div class="no-selection">No users selected yet</div>';
            return;
        }

        selectedUsers.forEach(user => {
            const userElement = document.createElement('div');
            userElement.className = 'selected-user-item';
            userElement.innerHTML = `
                <div class="user-info">
                    <strong>${user.Username || 'Unknown User'}</strong>
                    <span>${user.Email || 'No email'}</span>
                </div>
                <button type="button" class="remove-user-btn" title="Remove user">×</button>
            `;
            
            userElement.querySelector('.remove-user-btn').addEventListener('click', () => {
                removeUserFromSelection(user.UserID);
            });
            
            selectedUsersDiv.appendChild(userElement);
        });
    }

    function updateAssignedUsersInput() {
        assignedUsersInput.value = selectedUsers.map(user => user.UserID).join(',');
        console.log('Assigned users:', assignedUsersInput.value);
    }

    // Handle presigned upload on form submit
    form.addEventListener('submit', async (e) => {
        if (!fileInput.files.length) {
            // No file to upload, just submit the form
            return;
        }
        
        e.preventDefault();
        const file = fileInput.files[0];
        
        try {
            console.log('File:', file.name, file.type);
            const presignRes = await fetch(`/presign-upload?filename=${encodeURIComponent(file.name)}&contentType=${encodeURIComponent(file.type)}`);
            console.log('Presign:', presignRes.status, presignRes.statusText);
            
            if (!presignRes.ok) throw new Error(`Presign failed: ${presignRes.statusText}`);
            
            const { url, key } = await presignRes.json();
            console.log('Presigned URL:', url);
            
            const uploadRes = await fetch(url, {
                method: 'PUT',
                headers: { 'Content-Type': file.type },
                body: file
            });
            
            console.log('Upload:', uploadRes.status, uploadRes.statusText);
            if (!uploadRes.ok) throw new Error(`Upload failed: ${uploadRes.statusText}`);
            
            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.name = 'fileKey';
            hidden.value = key;
            form.appendChild(hidden);
            form.submit();
        } catch (err) {
            console.error('Error:', err.message);
            alert('File upload failed. Check console for details.');
        }
    });
</script>

<style>
    .search-results-container {
        margin-top: 10px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        max-height: 300px;
        overflow-y: auto;
        background: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .search-result-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 15px;
        border-bottom: 1px solid var(--gray-light);
        transition: var(--transition);
        cursor: pointer;
    }

    .search-result-item:hover {
        background: var(--gray-light);
    }

    .search-result-item:last-child {
        border-bottom: none;
    }

    .search-result-item .user-info {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .search-result-item .user-info strong {
        font-weight: 600;
        margin-bottom: 2px;
        color: var(--dark);
    }

    .search-result-item .user-info span {
        font-size: 0.9rem;
        color: var(--gray);
    }

    .add-user-btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 600;
        transition: var(--transition);
        white-space: nowrap;
    }

    .add-user-btn:hover {
        background: var(--primary-dark);
        transform: scale(1.05);
    }

    .selected-users-container {
        margin-top: 10px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        min-height: 60px;
        padding: 15px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        background: #fafbff;
    }

    .selected-user-item {
        display: flex;
        align-items: center;
        gap: 10px;
        background: white;
        padding: 10px 15px;
        border-radius: 25px;
        border: 2px solid var(--primary);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        animation: slideIn 0.3s ease;
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .selected-user-item .user-info {
        display: flex;
        flex-direction: column;
    }

    .selected-user-item .user-info strong {
        font-weight: 600;
        font-size: 0.9rem;
        color: var(--dark);
    }

    .selected-user-item .user-info span {
        font-size: 0.8rem;
        color: var(--gray);
    }

    .remove-user-btn {
        background: var(--danger);
        color: white;
        border: none;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
    }

    .remove-user-btn:hover {
        background: #d11450;
        transform: scale(1.1);
    }

    .no-results, .no-selection, .loading-users {
        padding: 20px;
        text-align: center;
        color: var(--gray);
        font-style: italic;
    }

    .loading-users {
        color: var(--primary);
    }

    /* Scrollbar styling */
    .search-results-container::-webkit-scrollbar {
        width: 6px;
    }

    .search-results-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 0 8px 8px 0;
    }

    .search-results-container::-webkit-scrollbar-thumb {
        background: var(--primary);
        border-radius: 3px;
    }

    .search-results-container::-webkit-scrollbar-thumb:hover {
        background: var(--primary-dark);
    }
</style>