<%- include('partials/header', { title: title, user: user }) %>

<div class="container">
    <div class="tasks-container">
        <div class="tasks-header">
            <h1>üìã Your Tasks</h1>
            <a href="/create-task" class="btn btn-primary">‚ûï Create New Task</a>
        </div>

        <!-- Search Section -->
        <div class="search-section">
            <div class="search-box">
                <input 
                    type="text" 
                    id="search-input" 
                    placeholder="üîç Search tasks by name, description, or assignee..." 
                    class="form-control search-input"
                >
                <button id="clear-search" class="clear-search-btn" style="display: none;">
                    ‚úï
                </button>
            </div>
            <div class="search-stats">
                <span id="search-stats">
                    Showing <%= tasks.length %> task<%= tasks.length !== 1 ? 's' : '' %>
                </span>
            </div>
        </div>

        <div class="tasks-grid" id="tasks-grid">
            <% if (tasks && tasks.length) { %>
                <% tasks.forEach(task => { %>
                    <div class="task-card" data-task-name="<%= task.name.toLowerCase() %>" 
                         data-task-description="<%= (task.description || '').toLowerCase() %>"
                         data-task-assignees="<%= (task.assignedToUsernames || []).join(' ').toLowerCase() %>">
                        <div class="task-header">
                            <div>
                                <h3 class="task-title">
                                    <% if (task.id) { %>
                                        <a href="/task/<%= task.id %>" class="task-link"><%= task.name %></a>
                                    <% } else { %>
                                        <%= task.name %>
                                    <% } %>
                                </h3>
                                <div class="task-meta">
                                    <div class="task-meta-item">
                                        <span>üìÖ</span>
                                        <span><%= new Date(task.createdAt).toLocaleDateString() %></span>
                                    </div>
                                    <div class="task-meta-item">
                                        <span>üë§</span>
                                        <span>Created by: <%= task.createdByUsername || task.createdBy %></span>
                                    </div>
                                    <% if (task.fileKey || task.fileUrl) { %>
                                        <div class="task-meta-item">
                                            <span>üìé</span>
                                            <span>Has attachment</span>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                        
                        <div class="task-description">
                            <%= task.description %>
                        </div>
                        
                        <% if (task.assignedTo && task.assignedTo.length) { %>
                            <div class="task-assignment-section">
                                <strong>Assigned to:</strong>
                                <div class="task-assignees">
                                    <% if (task.assignedToUsernames && task.assignedToUsernames.length) { %>
                                        <% task.assignedToUsernames.forEach(username => { %>
                                            <span class="assignee-badge"><%= username %></span>
                                        <% }); %>
                                    <% } else if (task.assignedTo && task.assignedTo.length) { %>
                                        <!-- Fallback to IDs if usernames not available -->
                                        <% task.assignedTo.forEach(userId => { %>
                                            <span class="assignee-badge"><%= userId %></span>
                                        <% }); %>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                        
                        <div class="task-actions">
                            <% if (task.fileKey || task.fileUrl) { %>
                                <button class="btn btn-outline download-btn" 
                                        data-task-id="<%= task.id %>"
                                        data-file-name="<%= task.name %>">
                                    üìé Download Attachment
                                </button>
                            <% } %>
                            <% if (task.id) { %>
                                <a href="/task/<%= task.id %>" class="btn btn-secondary">View Details</a>
                                <a href="/task/<%= task.id %>/files" class="btn btn-outline">üìÅ Files</a>
                                <% if (user && user.userId === task.createdBy) { %>
                                    <a href="/edit-task/<%= task.id %>" class="btn btn-primary">‚úèÔ∏è Edit</a>
                                <% } %>
                            <% } %>
                        </div>

                        <!-- Additional task info -->
                        <div class="task-additional-info">
                            <div class="task-id">
                                <small>Task ID: <%= task.id %></small>
                            </div>
                            <div class="created-at">
                                <small>Created: <%= new Date(task.createdAt).toLocaleString() %></small>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="task-card" style="text-align: center; padding: 3rem;">
                    <h3 style="margin-bottom: 1rem;">No tasks found</h3>
                    <p style="color: var(--gray); margin-bottom: 1.5rem;">You don't have any tasks assigned to you yet.</p>
                    <a href="/create-task" class="btn btn-primary">Create Your First Task</a>
                </div>
            <% } %>
        </div>

        <!-- No search results message (hidden by default) -->
        <div id="no-results" class="no-results" style="display: none;">
            <div class="task-card" style="text-align: center; padding: 3rem;">
                <h3 style="margin-bottom: 1rem;">No matching tasks found</h3>
                <p style="color: var(--gray); margin-bottom: 1.5rem;">Try adjusting your search terms</p>
                <button id="clear-search-results" class="btn btn-primary">Clear Search</button>
            </div>
        </div>
    </div>
</div>

<!-- Loading Spinner -->
<div id="loadingSpinner" class="loading-spinner" style="display: none;">
    <div class="spinner-content">
        <div class="spinner"></div>
        <p>Generating download link...</p>
    </div>
</div>

<%- include('partials/footer') %>

<style>
    /* Search Section Styles */
    .search-section {
        background: white;
        padding: 1.5rem;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        margin-bottom: 2rem;
    }

    .search-box {
        position: relative;
        max-width: 600px;
        margin-bottom: 1rem;
    }

    .search-input {
        width: 100%;
        padding: 1rem 45px 1rem 1rem;
        border: 2px solid var(--gray-light);
        border-radius: var(--border-radius);
        font-size: 1rem;
        transition: var(--transition);
        background: white;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
    }

    .search-input::placeholder {
        color: var(--gray);
    }

    .clear-search-btn {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        font-size: 18px;
        color: var(--gray);
        cursor: pointer;
        padding: 5px;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
    }

    .clear-search-btn:hover {
        background: var(--gray-light);
        color: var(--dark);
    }

    .search-stats {
        font-size: 0.9rem;
        color: var(--gray);
        font-weight: 500;
    }

    .no-results {
        text-align: center;
        margin-top: 2rem;
    }

    /* Task Link Styles */
    .task-link {
        color: var(--primary);
        text-decoration: none;
        transition: var(--transition);
    }

    .task-link:hover {
        color: var(--primary-dark);
        text-decoration: underline;
    }

    /* Task Assignment Section */
    .task-assignment-section {
        margin: 1.5rem 0;
        padding: 1rem 0;
        border-top: 1px solid var(--gray-light);
        border-bottom: 1px solid var(--gray-light);
    }

    .task-assignment-section strong {
        display: block;
        margin-bottom: 0.8rem;
        color: var(--dark);
        font-weight: 600;
    }

    .task-assignees {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .assignee-badge {
        background: var(--primary);
        color: white;
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        display: inline-block;
    }

    /* Task Actions */
    .task-actions {
        display: flex;
        gap: 0.8rem;
        margin-top: 1.5rem;
        flex-wrap: wrap;
    }

    .task-actions .btn {
        padding: 0.6rem 1.2rem;
        font-size: 0.9rem;
    }

    .task-actions .download-btn:disabled {
        background: var(--gray-light);
        color: var(--gray);
        cursor: not-allowed;
    }

    /* Task Additional Info */
    .task-additional-info {
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid var(--gray-light);
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .task-additional-info small {
        color: var(--gray);
        font-size: 0.8rem;
    }

    /* Search highlight */
    .search-highlight {
        background-color: #fff3cd;
        padding: 2px 4px;
        border-radius: 3px;
        font-weight: 600;
    }

    /* Loading Spinner */
    .loading-spinner {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .spinner-content {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--primary);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .task-actions {
            flex-direction: column;
        }

        .task-actions .btn {
            width: 100%;
            text-align: center;
        }

        .task-additional-info {
            flex-direction: column;
            gap: 0.3rem;
        }

        .search-section {
            padding: 1rem;
        }

        .search-input {
            font-size: 14px;
            padding: 0.8rem 40px 0.8rem 0.8rem;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('search-input');
        const clearSearchBtn = document.getElementById('clear-search');
        const clearSearchResultsBtn = document.getElementById('clear-search-results');
        const tasksGrid = document.getElementById('tasks-grid');
        const noResults = document.getElementById('no-results');
        const searchStats = document.getElementById('search-stats');
        const taskCards = document.querySelectorAll('.task-card');
        const originalTaskCount = taskCards.length;
        const loadingSpinner = document.getElementById('loadingSpinner');

        // Function to update search stats
        function updateSearchStats(visibleCount, totalCount, isSearching) {
            if (isSearching) {
                searchStats.textContent = `Showing ${visibleCount} of ${totalCount} task${totalCount !== 1 ? 's' : ''}`;
            } else {
                searchStats.textContent = `Showing ${totalCount} task${totalCount !== 1 ? 's' : ''}`;
            }
        }

        // Function to perform search
        function performSearch(searchTerm) {
            const term = searchTerm.toLowerCase().trim();
            let visibleCount = 0;

            taskCards.forEach(card => {
                const taskName = card.getAttribute('data-task-name');
                const taskDescription = card.getAttribute('data-task-description');
                const taskAssignees = card.getAttribute('data-task-assignees');

                const matches = term === '' || 
                    taskName.includes(term) || 
                    taskDescription.includes(term) || 
                    taskAssignees.includes(term);

                if (matches) {
                    card.style.display = 'block';
                    visibleCount++;
                    
                    // Highlight search terms in task content
                    if (term !== '') {
                        highlightText(card, term);
                    } else {
                        removeHighlights(card);
                    }
                } else {
                    card.style.display = 'none';
                    removeHighlights(card);
                }
            });

            // Show/hide no results message
            if (term !== '' && visibleCount === 0) {
                tasksGrid.style.display = 'none';
                noResults.style.display = 'block';
            } else {
                tasksGrid.style.display = 'grid';
                noResults.style.display = 'none';
            }

            // Update search stats
            updateSearchStats(visibleCount, originalTaskCount, term !== '');
        }

        // Function to highlight search terms
        function highlightText(element, term) {
            const elementsToHighlight = element.querySelectorAll('.task-title, .task-description, .assignee-badge');
            
            elementsToHighlight.forEach(el => {
                const originalHTML = el.getAttribute('data-original-html') || el.innerHTML;
                el.setAttribute('data-original-html', originalHTML);
                
                const highlightedHTML = originalHTML.replace(
                    new RegExp(term, 'gi'),
                    match => `<span class="search-highlight">${match}</span>`
                );
                
                el.innerHTML = highlightedHTML;
            });
        }

        // Function to remove highlights
        function removeHighlights(element) {
            const elementsWithHighlights = element.querySelectorAll('[data-original-html]');
            
            elementsWithHighlights.forEach(el => {
                const originalHTML = el.getAttribute('data-original-html');
                if (originalHTML) {
                    el.innerHTML = originalHTML;
                    el.removeAttribute('data-original-html');
                }
            });
        }

        // Download file functionality - IMPROVED VERSION
        document.querySelectorAll('.download-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const taskId = this.getAttribute('data-task-id');
                const fileName = this.getAttribute('data-file-name') || 'download';
                
                // Show loading spinner and disable button
                loadingSpinner.style.display = 'flex';
                this.disabled = true;
                this.innerHTML = 'üìé Downloading...';
                
                try {
                    console.log('Requesting download for task:', taskId);
                    
                    // Get fresh download URL from server
                    const response = await fetch(`/download-file/${taskId}`);
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    
                    if (data.downloadUrl) {
                        console.log('Download URL received, starting download...');
                        
                        // Create a temporary anchor element to trigger download
                        const a = document.createElement('a');
                        a.href = data.downloadUrl;
                        a.download = fileName;
                        a.target = '_blank';
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        
                        console.log('Download initiated successfully');
                    } else {
                        throw new Error('No download URL received from server');
                    }
                } catch (error) {
                    console.error('Download error:', error);
                    alert('Failed to download file: ' + error.message);
                } finally {
                    // Hide loading spinner and reset button
                    loadingSpinner.style.display = 'none';
                    this.disabled = false;
                    this.innerHTML = 'üìé Download Attachment';
                }
            });
        });

        // Event listeners
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value;
            performSearch(searchTerm);
            
            // Show/hide clear button
            clearSearchBtn.style.display = searchTerm ? 'flex' : 'none';
        });

        clearSearchBtn.addEventListener('click', function() {
            searchInput.value = '';
            performSearch('');
            clearSearchBtn.style.display = 'none';
            searchInput.focus();
        });

        clearSearchResultsBtn.addEventListener('click', function() {
            searchInput.value = '';
            performSearch('');
            clearSearchBtn.style.display = 'none';
            searchInput.focus();
        });

        // Initialize search stats
        updateSearchStats(originalTaskCount, originalTaskCount, false);
    });
</script>